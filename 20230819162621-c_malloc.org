:PROPERTIES:
:ID:       c95c860c-3742-4a59-a22e-13530e9e6f2d
:END:
#+title: C malloc()
* About
The “malloc” or “memory allocation” method in C is used to dynamically allocate a single large block of memory with the specified size.

It returns a pointer of type void which can be cast into a pointer of any form.

It doesn’t Initialize memory at execution time so that it has initialized each block with the default garbage value initially.

The malloc function is not guaranteed to successfully allocate memory. If it fails, it returns a /null pointer/.

It is important to note that memory allocated using malloc is =accessible outside the function in which it was allocated=.

* Syntax
#+begin_src C
  ptr = (cast-type *) malloc(byte-size)
#+end_src

* Example
#+begin_src C :results output
  #include <stdio.h>
  #include <stdlib.h>
 
  int main()
  {
    // This pointer will hold the
    // base address of the block created
    int* ptr;
    int n, i;
 
    // Get the number of elements for the array
    scanf("%d",&n);
    printf("Entered number of elements: %d\n", n);
 
    // Dynamically allocate memory using malloc()
    ptr = (int*)malloc(n * sizeof(int));
 
    // Check if the memory has been successfully
    // allocated by malloc or not
    if (ptr == NULL) {
      printf("Memory not allocated.\n");
      exit(0);
    }
    else {
 
      // Memory has been successfully allocated
      printf("Memory successfully allocated using malloc.\n");
 
      // Get the elements of the array
      for (i = 0; i < n; ++i) {
        ptr[i] = i + 1;
      }
 
      // Print the elements of the array
      printf("The elements of the array are: ");
      for (i = 0; i < n; ++i) {
        printf("%d, ", ptr[i]);
      }
    }
 
    return 0;
  }
#+end_src

#+RESULTS:
: Enter number of elements:Entered number of elements: -683734560
: Memory not allocated.
