:PROPERTIES:
:ID:       16242e22-1af0-4aaf-a206-4ba77e6c74f1
:END:
#+title: C Function Pointers

A function pointer is a pointer that holds the address of a function.

One concern regarding the use of function pointers is a potentially slower running program. The processor may not be able to use /branch prediction/ in conjunction with /pipelining/.

=Branch prediction= is a technique whereby the processor will guess which multiple execution sequences will be executed.

=Pipelining= is a hardware technology commonly used to improve processor performance and is achieved by overlapping instruction execution.

* Declaring Function Pointers
Below, we declare a pointer to a function that
is passed void and returns void:

#+begin_src C
   void (*foo)();
#+end_src

* Using a Function Pointer

To use the function pointer to execute the square function, we need to assign the square function’s address to the function pointer, as shown below.

As with array names, when we use the name of a function by itself, it returns the function’s address.

#+begin_src C
  #include <stdio.h>
  int (*fptr1)(int);
  int square(int num) {
    return num*num;
  }
  int main(){
    int n = 5;
    fptr1 = square;
    printf("%d squared is %d\n",n, fptr1(n));
  }
#+end_src

#+RESULTS:
: 5 squared is 25
