:PROPERTIES:
:ID:       de735787-d10c-4d01-9f24-0b69e345140a
:END:
#+title: Notes: Competitive Programmer's Hsndbook
* Index                                                                 :toc:
- [[#number-theory][Number Theory]]
  - [[#primes-and-factors][Primes and factors]]

* Number Theory
Number theory is a branch of mathematics that studies integers.
** Primes and factors

*** Conjectures

1. _Goldbach’s conjecture:_ Each even integer n > 2 can be represented as a sum n = a + b so that both a and b are primes.
2. _Twin prime conjecture:_ There is an infinite number of pairs of the form {p, p +2}, where both p and p +2 are primes.
3. _Legendre’s conjecture:_ There is always a prime between numbers n2 and (n+1)2, where n is any positive integer.

*** Basic Algorithm

If a number n is not prime, it can be represented as a product a· b, where a ≤ sqrt(n) or b ≤ sqrt(n), so it certainly has a factor between 2 and ⌊sqrt(n)⌋.

#+begin_src C++
  bool prime(int n) {
    if (n < 2) return false;
    for (int x = 2; x*x <= n; x++) {
      if (n%x == 0) return false;
    }
    return true;
  }
#+end_src

The following function factors constructs a vector that contains the _prime factor-ization_ of n.
The function divides n by its prime factors, and adds them to the vector.
The process ends when the remaining number n has no factors between 2 and ⌊�n⌋. If n > 1, it is prime and the last factor.

#+begin_src C++
  vector<int> factors(int n) {
    vector<int> f;
    for (int x = 2; x*x <= n; x++) {
      while (n%x == 0) {
	f.push_back(x);
	n /= x;
      }
    }
    if (n > 1) f.push_back(n);
    return f;
  }
#+end_src

*** Sieve of Eratosthenes

The sieve of Eratosthenes is a preprocessing algorithm that builds an array using which we can efficiently check if a given number between 2...n is prime and, if it is not, find one prime factor of the number.

[[./img/sieve_of_eratosthenes.png]]

#+begin_src C++
  int n = 20;
  int sieve[n]; 
  for (int x = 2; x <= n; x++) {
    if (sieve[x]) continue;
    for (int u = 2*x; u <= n; u += x) {
      sieve[u] = x;
    }
   }
#+end_src

*** Euclid's Algorithm
Euclid’s algorithm provides an efficient way to find the greatest common divisor of two numbers.
The algorithm is based on the following formula:

if b = 0:  gcd(a , b) = a
if b != 0: gcd(a , b) = gcd(b , a mod b)

The algorithm can be implemented as follows:
#+begin_src C++
  int gcd(int a, int b) {
    if (b == 0) return a;
    return gcd(b, a%b);
  }
#+end_src
