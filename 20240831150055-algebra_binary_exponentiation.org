:PROPERTIES:
:ID:       0563f8d2-edd4-4c55-9df4-0fd485035558
:END:
#+title: Algebra: Binary Exponentiation
** Overview

Binary Exponentiation (or Exponentiation by Squaring) efficiently computes \(a^n\) with \(O(\log n)\) multiplications, compared to the naive approach which requires \(O(n)\) multiplications. 
** Algorithm

Binary Exponentiation leverages the binary representation of the exponent to break down the computation into smaller steps.

*** Recursive Approach

The recursive formula for binary exponentiation is:
\[
a^n = \begin{cases}
1 & \text{if } n == 0 \\
(a^{n/2})^2 & \text{if } n \text{ is even} \\
(a^{(n-1)/2})^2 \cdot a & \text{if } n \text{ is odd}
\end{cases}
\]

Example implementation in C++:
#+begin_src C++
long long binpow(long long a, long long b) {
    if (b == 0) return 1;
    long long res = binpow(a, b / 2);
    if (b % 2) return res * res * a;
    else return res * res;
}
#+end_src

** Application:
*** Modular Exponentiation

To compute x^n mod m:
#+begin_src C++
long long binpow(long long a, long long b, long long m) {
    a %= m;
    long long res = 1;
    while (b > 0) {
        if (b & 1) res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}
#+end_src

