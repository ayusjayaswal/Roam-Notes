:PROPERTIES:
:ID:       6b1edb15-aca8-4aa8-8ffa-3332b428df1f
:END:
#+title: C: Dynamic Allocation
C Dynamic Memory Allocation can be defined as a procedure in which the size of a data structure (like Array) is changed during the runtime.

The /malloc function/ single argument specifies the number of bytes to allocate. If suc‐
cessful, it returns a pointer to memory allocated from the heap. If it fails, it returns a
null pointer.

* Memory Leaks
A memory leak occurs when allocated memory is never used again but is not freed. This can happen when:

• The memory’s address is lost
• The free function is never invoked though it should be (sometimes called a hidden
leak)

A problem with memory leaks is that the memory cannot be reclaimed and used later. The amount of memory available to the heap manager is decreased.

If memory is repeatedly allocated and then lost, then the program may terminate when more memory is needed but malloc cannot allocate it because it ran out of memory. In extreme cases, the operating system may crash.

The number of bytes allocated is specified by its single argument. Its return type is a pointer to void.
If memory is not available, NULL is returned.
The function does not clear or otherwise modify the memory, thus the contents of memory should be treated as if it contained garbage.

* Calloc
The calloc function will allocate and clear memory at the same time. Its prototype
follows:
#+begin_src C
   void *calloc(size_t numElements, size_t elementSize);
#+end_src

If either numElements or elementSize is zero, then a null pointer may be returned.
If calloc is unable to allocate memory, a null pointer is returned and the global variable, errno, is set to ENOMEM (out of memory).
This is a POSIX error code and may not be available on all systems.

Instead of using calloc, the malloc function along with the memset function can be used to achieve the same results, as shown below:
#+begin_src C
    int *pi = malloc(5 * sizeof(int));
    memset(pi, 0, 5* sizeof(int));
#+end_src

Use calloc when memory needs to be zeroed out. However, the execution of calloc may take longer than using malloc.

* Realloc
The realloc function will reallocate memory. Its prototype follows:
#+begin_src C
    void *realloc(void *ptr, size_t size);
#+end_src

The requested size may be smaller or larger than the currently allocated amount.
If the size is less than what is currently allocated, then the excess memory is returned to the heap.
There is no guarantee that the excess memory will be cleared.

If the size is greater than what is currently allocated, then if possible, the memory will be allocated from the region immediately following the current allocation.
Otherwise, memory is allocated from a different region of the heap and the old memory is copied to the new region.

If the size is zero and the pointer is not null, then the pointer will be freed.
If space cannot be allocated, then the original block of memory is retained and is not changed.
However, the pointer returned is a null pointer and the errno is set to

|----------+--------------------+--------------------------------------------------------------------------------------------|
| First    | Second             | Behaviour                                                                                  |
|----------+--------------------+--------------------------------------------------------------------------------------------|
| NULL     | NA                 | Same as Malloc                                                                             |
| Not NULL | 0                  | Original Block is Freed                                                                    |
| Not NULL | Less than Original | A smaller Block Allocated                                                                  |
| Not NULL | More than Original | A larger block is allocated either from the current location or another  region of the heap |
|----------+--------------------+--------------------------------------------------------------------------------------------|


** example:
#+begin_src C
  #include <stdlib.h>
  #include <stdio.h>
  #include <string.h>
  int main(){
    char *string1;
    char *string2;
    string1 = (char*) malloc(16);
    strcpy(string1, "0123456789AB");
    string2 = realloc(string1, 8);
    printf("string1  Value: %p [%s]\n", string1, string1);
    printf("string2  Value: %p [%s]\n", string2, string2);
  }
#+end_src

#+RESULTS:
| string1 | Value: | 0x5f7bb43a42a0 | [0123456789AB] |
| string2 | Value: | 0x5f7bb43a42a0 | [0123456789AB] |

WHY????
* Deallocating Memory Using the free Function
This is normally performed using the free function, whose prototype is shown below:
#+begin_src C
   void free(void *ptr);
#+end_src
** Double Free
The term double free refers to an attempt to free a block of memory twice. A simple
example follows:
#+begin_src C
  int *pi = (int*) malloc(sizeof(int));
  ,*pi = 5;
  int *p2 = p1;
  free(p1);
  ...
  free(p2);
#+end_src

The execution of the second free function will result in a runtime exception.

* Custom Safer Free Function
The free function does not check the pointer passed to see whether it is NULL and does not set the pointer to NULL before it returns. Setting a pointer to NULL after freeing is a good practice.

/Note a pointer to a pointer is passed./

#+begin_src C
  void saferFree(void **pp) {
    if (pp != NULL && *pp != NULL) { 
      free(*pp);
      ,*pp = NULL;
    }
  }
#+end_src
